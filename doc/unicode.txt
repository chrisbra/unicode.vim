*unicode.txt*	Useful functions for use with unicode

Author:  Christian Brabandt <cb@256bit.org>
Version: 0.21 Tue, 26 Sep 2017 14:21:42 +0200
                                                        *unicode-copyright*
Copyright: (c) 2009 - 2020 by Christian Brabandt
           The VIM LICENSE applies to unicode.vim and unicode.txt
           (see |copyright|) except use unicode instead of "Vim".
           NO WARRANTY, EXPRESS OR IMPLIED.  USE AT-YOUR-OWN-RISK.

==============================================================================
0. Contents                                                  *unicode-toc*

        1.  Functionality...........................: |unicode-plugin|
	2.  Commands................................: |unicode-commands|
        3.  Completions.............................: |unicode-completion|
        4.  Mappings................................: |unicode-mappings|
        5.  Public functions........................: |unicode-functions|
        6.  Changelog...............................: |unicode-plugin-history|

==============================================================================
                                                              *unicode-plugin*
1. Functionality

The plugins main purpose is to make handling unicode data and digraphs more
easily. It serves 3 main purposes:

    1) Complete Characters
       This plugin provides a custom completion function to complete unicode
       characters using their name or Codepoint value. If a digraph exists for
       that character, it will be displayed in parentheses. This is (by
       default) activated by pressing Ctrl-X Ctrl-Z (|i_CTRL-X_CTRL-Z|) in
       insert mode.

       Additionally it provides a completion function for digraphs. This is
       (by default) activated by pressing Ctrl-X Ctrl-G (|i_CTRL-X_CTRL-G|) in
       insert mode.

    2) Identify Characters
       This plugin provides the |:UnicodeName| function to identify the
       character under the cursor similar to the builtin command |ga|. The
       |:UnicodeSearch| command can be used to search for a unicode character
       with a given name or value.

    3) Ease the use of digraphs
       Use the |:Digraphs| command to search for a digraph with a given name
       or value (or simply display all available digraphs similar to how the
       |:digraph| command works. By default it also maps the <F4> key (in
       |Operator-pending-mode| and |Visual| mode) to transform 2 given
       characters into their corresponding digraph value.

The unicode.vim Plugin uses the data available from the Unicode
Consortium's website (https://www.unicode.org) to let you enter Unicode
characters using a completion function.

By default the plugin stores the file UnicodeData.txt from
https://www.unicode.org/Public/UNIDATA/UnicodeData.txt (alternatively you can
download it from ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt)
in the data directory. The plugin tries to download the file using |netrw|.
If this is unsuccessful, or you do not have |netrw| enabled, download the file
manually and save it in the data directory.

                         *unicode-data-directory* *unicode-cache-directory*
If you run Neovim, then the data and cache directory are XDG Base Directory
Specification compliant. In this case the data and cache directories are
`stdpath("data") . "/site/unicode"` and `stdpath("cache") . "/unicode"`,
respectively (see |stdpath()|).

If not running Neovim, then the data directory is the same as the cache
directory, which is the "unicode" directory below the autoload directory in
which unicode.vim is located. So if you have installed unicode.vim into
"/home/user/.vim", then the data and cache directory should be
"/home/user/.vim/autoload/unicode".

                     *g:Unicode_data_directory* *g:Unicode_cache_directory*
The cache and data directory can also specified using the variables
`g:Unicode_data_directory` and `g:Unicode_cache_directory` like so: >

    let g:Unicode_data_directory = /home/user/data/
    let g:Unicode_cache_directory = /tmp/
<
If the cache or data directory does not exist, it is created on the first use
(together with any necessary intermediate directories).

                                                      *g:Unicode_use_cache*
After the plugin has been first used, it automatically creates some cache
files (see |:UnicodeCache| and |:UnicodeTable|), which can be safely removed,
they will be recreated the next time this plugin is used. To prevent the
plugin from creating any cache files or the cache directory, define the
variable `g:Unicode_use_cache` with a false-ish value, e.g. >

    let g:Unicode_use_cache = v:false
<
Note that setting this varibale does not delete any previously generated cache
files, those have to be removed by hand.

                                                     *unicode-plugin-error*
If the plugin gives an error or does not complete anything, first check, that
UnicodeData.txt from the Unicode Consortium has been successfully downloaded.
It should be located in the data directory (see |unicode-data-directory|) and
should look like this:

0020;SPACE;Zs;0;WS;;;;;N;;;;;
0021;EXCLAMATION MARK;Po;0;ON;;;;;N;;;;;
0022;QUOTATION MARK;Po;0;ON;;;;;N;;;;;
0023;NUMBER SIGN;Po;0;ET;;;;;N;;;;;
0024;DOLLAR SIGN;Sc;0;ET;;;;;N;;;;;
0025;PERCENT SIGN;Po;0;ET;;;;;N;;;;;
0026;AMPERSAND;Po;0;ON;;;;;N;;;;;
0027;APOSTROPHE;Po;0;ON;;;;;N;APOSTROPHE-QUOTE;;;;
0028;LEFT PARENTHESIS;Ps;0;ON;;;;;Y;OPENING PARENTHESIS;;;;
0029;RIGHT PARENTHESIS;Pe;0;ON;;;;;Y;CLOSING PARENTHESIS;;;;
[...]
(several thousand lines following)

If the file looks correct, and the plugin is still not working correctly
contact the maintainer. You'll find my email address in the third line of this
document. Please be patient, it might take a while, until I can take care of
your report.

==============================================================================
2. Commands                                                 *unicode-commands*
                                                            *:UnicodeName*
Suppose, you want to know, what the Unicode Name for the Character under the
cursor is. You simply enter the ex command: >

    :UnicodeName [reg [type]]

The plugin will then output the character, the character's hexadecimal value,
the official Unicode name and the search pattern to search for that character.

Additionally, if there exists a digraph for that character, it will also be
shown in parentheses (in case of several digraphs for that character, all
will be shown, separated by space).

The search pattern is always the second last item, it starts with a "/"

An example might look like this: >

    '€' U+20AC Dec:8364 EURO SIGN (=e Eu) &euro; /\%u20ac "\u20ac"
<
You can see, this was issued on the Euro sign. The first value is the
character, the second item is the Unicode Codepoint followed by the decimal
value of the character, followed by the official Unicode Name. After the name,
the different digraphs are put in parentheses, followed by the html entity
name followed by the regular expression atom, to search for this character
followed by the VimScript |expr-string| that can be used to enter that
quaracter (as you see, it is actually quite similar to the search pattern).

                                                         *unicode_nerdfonts*
And finally, if the character is available as Nerd Font Character (using the
https://github.com/ryanoasis/nerd-fonts repository), this will be printed
as last item and may look like this: >

  '♥' U+2665 Dec:9829 BLACK HEART SUIT &hearts; &heartsuit; /\%u2665 "\u2665" Nerdchar: '♥' oct-heart 
<

If you specify a register name [reg], the message will also be saved into that
register. If you optionally specify a type [type] (either one of digraph,
html, name, regex or value) only that part of the output will be stored in the
register.

								*:Digraphs*
    `:Digraphs`

Outputs the digraph list in an easier way to read with coloring of the
digraphs. If a character has several digraphs, all will be shown, separated by
space.

If you want to display a list with a line break after each digraph, use the
bang attribute (Note, this output also contains the name in parentheses). >

    :Digraphs!

And if you want to display all digraphs matching a certain value, you can add
an argument to the command.

When the argument is a single character, it is matched as-is, and it is case
sensitive: >

    :Digraphs! A

displays all digraphs, that match 'A' (e.g. all that can be created with the
letter A or whose digraph matches the letter 'A').

When the argument consists of multiple characters, it is treated as a regular
expression, and it matches also the unicode name. Examples: >

    :Digraphs ^\Ca

will display all Digraphs that start with lowercase 'a'. >

    :Digraphs copy

will display all Digraphs, where their unicode name contains the word "copy"
(e.g. copyright symbol). Or: >

    :Digraphs greek

will display all Digraphs with greek letters, that have the word "greek" in
their name.

Note: you should always be able to abort that by pressing |CTRL-C|. To output
progress information, call the command with the |:verbose| command modifier.

							    *:UnicodeSearch*
>
    :UnicodeSearch [name|nr]

Outputs a list of unicode characters whose decimal value equals <nr> (use U+
or 0x prefix to search using hexadecimal values) or whose name matches the
given name (can be a regular expression). (Matching is done with the case
being ignored.) If possible, digraphs chars are displayed in (), separated by
commas and html entities are displayed as well. Note, depending on your
search term, this might be a little bit slow.

If you use the bang "!" attribute, it will prompt you for one or more numbers
of characters to insert. The numbers can be delimited by anything that is not
a digit. Valid corresponding characters are inserted into the buffer at the
current cursor position (only when your buffer is writable).

							    *:UnicodeTable*
>
    :UnicodeTable[!]

Creates a new window with a table of all Unicode characters. For performance
reasons, the table will be cached and stored locally in the cache directory
(see |unicode-cache-directory|) under the name "UnicodeTable.txt". That makes
loading the table after the initial run much faster. If you want to
re-generate the table from scratch (and discarding the cache file), use the
"!" attribute.

							    *:UnicodeDownload*
>
    :UnicodeDownload[!]

Downloads the Unicode data. Can also be used to update the local data file.
The downloaded file is stored as "UnicodeData.txt" in the data directory (see
|unicode-data-directory|).
When the optional "!" is given, won't ask for confirmation.

							    *:DigraphNew*
>
    :DigraphNew {char1}{char2}  {pattern}

can be used to create a new digraph whose unicode name matches {pattern}. 

If {pattern} is a hexadecimal pattern, create a digraph for the mentioned
character.

Example: >
    DigraphNew bh latin small.*b with stroke
    DigraphNew DH d0

This command supports shortcut letter names in the style of Perl's
"charnames" pragma: if {pattern} has the form {scriptname}:{charname},
then it is looked up as a letter {charname} inside a script
{scriptname}: the standard Unicode names are searched for the names
>
      {scriptname} CAPITAL LETTER {charname}
      {scriptname} SMALL LETTER {charname}
      {scriptname} LETTER {charname}

in that order. If {charname} does not contain any uppercase letters,
then the CAPITAL variant is ignored, otherwise the SMALL variant is
ignored. The first character found which corresponds to one of these
names is assigned to the digraph. For example

>
    Short                   Full
    -----------------------------------------------------------------
    Greek: Sigma            GREEK CAPITAL LETTER SIGMA
    greek: siGma            GREEK CAPITAL LETTER SIGMA
    Greek: sigma            GREEK SMALL LETTER SIGMA
    Greek: final sigma      GREEK SMALL LETTER FINAL SIGMA
    Greek: final Sigma      {Error, there is no capital final sigma!}
    ֑Hebrew: shin            HEBREW LETTER SHIN
    ֑Hebrew: sheva           {Error, not a letter but a mark!}
                            ("hebr.*sheva" will work, however!)

Unlike in Perl both {scriptname} and {charname} can be patterns:
"imp.*ar.*:al.*" will match IMPERIAL ARAMAIC LETTER ALEPH!

Note that while this feature can save tedious repetitive typing
it uses ordinary pattern matching and can NOT resolve nonexistent
letters like capital final sigma above or funny lowercase/uppercase
name pairs like U+0195 LATIN SMALL LETTER HV and 
U+01F6 LATIN CAPITAL LETTER HWAIR!

							    *:UnicodeCache*
>
    :UnicodeCache

Manually re-creates the cache file from the "UnicodeData.txt" file. Should
normally not be needed to be executed manually, as the plugin does this for
you. Might be necessary if you want to distribute the plugin on a read-only
filesystem to set up everything before first using it. The cache file is named
"UnicodeData.vim" and stored in the cache directory (see
|unicode-cache-directory|).

==============================================================================
3. Completions
                                        *i_CTRL-X_CTRL-Z* *unicode-completion*
3.1 Completing Unicode Characters
---------------------------------

CTRL-X CTRL-Z           Search for the character in front of the cursor and
                        try to complete this letter using unicode names or
			values. If there is no letter in front of the cursor,
			a list with all available unicode characters is shown
			in a popup menu.
			(should have been <C-X><C-U> but this is used for user
			defined completions, so Z was chosen, since it is
			right next to it.)
       CTRL-N           Use next match. This match replaces the previous
                        match.
       CTRL-P           Use previous match. This match replaces the previous
                        one.

There are 3 possibilities to use the plugin. You can either search the Unicode
Character name, or search the Unicode-Codepoint (U+0010) or search by HTML
entity name.

For example, you would like to enter Æ, so you enter AE and press |<C-X><C-Z>|
while in insert mode. Alternatively you can enter the Unicode-Codepoint: U+C6
and press |<C-X><C-Z>| and the popup menu will show you all characters, that
have a codepoint like C6 with leading zeros, eg. U+00C6 and U+0C66
And finally you can enter &ae and press |<C-X><C-B>| and have the plugin
search by the HTML entity name (&aelig;)

A popup menu will appear, showing you the Unicode-Codepoint value, the
Unicode Character Name and the Unicode Character (and if you have enabled it,
it can also show you the digraph characters needed to create this character in
parentheses, see |unicode-plugin-config|). You can scroll down in the menu by
pressing <C-N> and up by pressing <C-P>.

A |preview-window| can be opened, if your Vim was compiled with the
quickfix-feature that displays the hexadecimal Unicode Codepoint, the name,
the digraph characters in parentheses (if they exist) followed by the glyph
itself by setting the variable g:Unicode_ShowPreviewWindow (see below). By
default, this feature is off.

Note: If completing takes longer than 2 seconds (e.g. because many unicode
names match), you will be notified and completing further items will be
stopped so you can only complete the so far matched unicode chars.

                                                    *unicode-plugin-config*
If you would like to specify a different URL from which to download
UnicodeData.txt, enter the URL as: >

    :let g:Unicode_URL='https:....'

To force downloading the file from that new URL, enter >

    :UnicodeDownload!

You can also use the |:UnicodeDownload| command to update your local unicode data file.

If you only want to complete the Unicode Names instead of the glyphs,
you can either set the global variable >

    let g:Unicode_CompleteName = 1
<
or you can use the mapping <leader>un which swaps the completion function
between completing the unicode name and completing the unicode glyph.

If you want the completion of the unicode chars to be opened in the preview
window, set the variable >

    let g:Unicode_ShowPreviewWindow = 1
<
in your |.vimrc|.

If you want the digraph generation to be restricted to certain digraphs only,
set the variable to the decimal codes of those digraphs. E.g. to only allow
generation of the € sign and umlauts, you would add to your |.vimrc| : >

    let g:Unicode_ConvertDigraphSubset = [ 
	\ char2nr("€"),
	\ char2nr("ä"),
	\ char2nr("Ä"),
	\ char2nr("ö"),
	\ char2nr("Ö"),
	\ char2nr("ü"),
	\ char2nr("Ü"),
	\ char2nr("ß") ]
<

If you want to change the color of the glyph displayed in the fzf window,
set the variable >

    let g:Unicode_fuzzy_color = 123
<
in your |.vimrc|.  Choose the decimal index of the desired color in your
terminal palette.

                                        *i_CTRL-X_CTRL-G* *digraph-completion*
3.2 Completing Digraphs
-----------------------

CTRL-X CTRL-G           Search for the character in front of the cursor and
                        try to complete this letter using a digraph. If there
                        is no letter in front of the cursor, a list with all
                        available digraphs is shown in a popup menu.
                        If both letters in front of the cursor form a digraph,
                        that digraph will be completed.
                        (Think of Glyph)
       CTRL-N           Use next match. This match replaces the previous
                        match.
       CTRL-P           Use previous match. This match replaces the previous
                        one.
                                        *i_CTRL-X_CTRL-B* *html-entityh-completion*
3.3 Completing HTML Entities
---------------------------

CTRL-X CTRL-B           Search for the characters in front of the cursor and
                        try to complete this letter using HTML entities.
                        If there is no letter in front of the cursor, a list with
                        all available HTML entities is shown in a popup menu.
       CTRL-N           Use next match. This match replaces the previous
                        match.
       CTRL-P           Use previous match. This match replaces the previous
                        one.

                                   *i_CTRL-G_CTRL-F* *unicode-fuzzy-insertion*
3.4 Inserting Unicode Characters After Fuzzy Search
--------------------------------------------------

CTRL-G CTRL-F           Invoke fzf to fuzzy search through all unicode names.
                        The chosen matches are inserted.

==============================================================================
4. Mappings						*unicode-mappings*

The unicode plugin provides those mappings:

Key		Mode		Function
<C-X><C-Z>	Insert		Complete Unicode Name before cursor |i_CTRL-X_CTRL-G|
<C-X><C-G>	Insert		Complete Digraph before cursor |i_CTRL-X_CTRL-Z|
<C-X><C-B>	Insert		Complete Entity before cursor |i_CTRL-X_CTRL-B|
<C-G><C-F>	Insert		Fuzzy Search Unicode Name |i_CTRL-G_CTRL-F|
<F4>		Normal/Visual   Generate Digraph from chars |<Plug>(MakeDigraph)|
<Leader>un	Normal		Toggle Completion of Unicode Names and Chars

To remap those mappings to different keys see below.

                                              *g:Unicode_no_default_mappings*
To prevent the unicode plugin from creating the above mappings define
`g:Unicode_no_default_mappings` with a true-ish value in your vimrc like so: >

    let g:Unicode_no_default_mappings = v:true
<
                                                        *<Plug>(MakeDigraph)*
The plugin sets up a map to <F4>, for easier generation of digraphs. This
allows you to enter the digraph base characters and let the plugin convert a
certain range to its corresponding digraphs. Consider this line: >

    a:e:o:u:1Sß/\
<
Now put the cursor on the first char, press <f4> and hit '$'. The result will
look like this: >

    äëöü¹ß×

Note, that all pairs of base characters have been converted to their
corresponding digraph, leaving chars, that don't form a digraph alone (the
'ß').

If you like to specify, which characters are allowed to be converted to a
digraph, you can define this using the variable Unicode_ConvertDigraphSubset
(see above).

If you like to change the default map, put a line like this into your |.vimrc|
>
    nmap <f2> <Plug>(MakeDigraph)
<
Now, the <f2> can be used to generate digraphs from their pairs. This is
done using an 'opfunc'-mapping (see |:map-operator|).

                                                        *<Plug>(UnicodeGA)*
The unicode plugin can be used to make the |ga| command more useful. If you
like to do this, then simply map the ga command like this in your |.vimrc| >

    nmap ga <Plug>(UnicodeGA)

This will invoke the |:UnicodeName| command whenever the ga command is used.

					*<Plug>(UnicodeSwapCompleteName)*
Instead of completing to the actual glyphs, the plugin can also complete
unicode names. Use the <Plug>(UnicodeSwapCompleteName) to toggle between both
completion types. By default, this is mapped to <Leader>un

					               *<Plug>(UnicodeFuzzy)*
Insert some unicode characters after performing a fuzzy search in all unicode
names.  To insert a single match from the fzf search results select the match
and press <ENTER>.  To insert multiple matches press <TAB> on each chosen
match then press <ENTER> to complete the insertion.
By default, this is mapped to <C-G><C-F> in insert mode only.
Requires fzf: https://github.com/junegunn/fzf
==============================================================================
5. Public functions					*unicode-functions*

The unicode plugins also makes some functions publicly available, so you can
use it, if you want to write your own VimScript and need to handle unicode.

These functions are available:

unicode#Digraph({string})			   *unicode#Digraph()*
        {string} needs to be a exactly 2 chars long.
	Returns the digraph of {string}. If it is not valid,
	returns en empty string.

unicode#FindDigraphBy({match})			   *unicode#FindDigraphBy()*
	Searches the digraphs for {match} and returns a list of dicts for
	each match. The dict can have the following keys:
		"name"	Unicode name
		"glyph"	Unicode Codepoint
		"dec"	Unicode Codepoint decimal value
		"hex"	Unicode Codepoint hex value
		"dig"	Digraph, to output this Unicode codepoint
			in Vim (see |i_CTRL-K|) (If there exists
			several digraphs, they will be separated
			by a space). This key is optional.
		"html"	Html entity to create this Unicode Codepoint.

	{match} can be a regular expression or a decimal or hex value (in
	which case the unicode characters will be searched for their
	decimal/hex values). Use the prefix "0x" to force searching for that
	particular hex value. If {match} is an expression, it follows the same
	rules effective for the |:Digraphs| command: it will be matched
	against the character name (and case will be ignored), unless it is
	a single character, in that case it will match 'dig' or 'glyph' (and
	case will not be ignored).

unicode#FindUnicodeBy({match}])			*unicode#FindUnicodeBy()*
	Searches the unicode data for {match} and returns a list of dicts,
	each dict representing one match. The dict can have the following
	keys:
		"name"	Unicode name
		"glyph"	Unicode Codepoint
		"dec"	Unicode Codepoint decimal value
		"hex"	Unicode Codepoint hex value
		"dig"	Digraph, to output this Unicode codepoint
			in Vim (see |i_CTRL-K|) (If there
			exists several digraphs, they will be separated
			by a space). This key is optional.
		"html"	Html entity to create this Unicode Codepoint.

	{match} can be a regular expression or a decimal or hex value (in
	which case the unicode characters will be searched for their
	decimal/hex values). Use the prefix "0x" or "U+" to force searching
	for that particular hex value. If {match} is an expression, it will
	be matched against the character name (and case will be ignored).
			    
unicode#Search({match})				*unicode#Search()*
	Searches the unicode data for {match} and returns the decimal value. 
        If the search result matches several times, prompts the user for which
        value to return.

unicode#UnicodeName({val})			 *unicode#UnicodeName()*
	returns the unicode name of the character with the decimal value {val}

unicode#Regex({val})					*unicode#Regex()*
        Returns the regex item for decimal value {val}.
        
        Example: To interactively search for Euro values, type:
>
        /<CTRL-R>=unicode#Regex(unicode#Search('euro'))<cr>

==============================================================================
6. unicode History                                    *unicode-plugin-history*

See https://github.com/chrisbra/unicode.vim/blob/master/CHANGELOG.md
==============================================================================
vim:tw=78:ts=8:ft=help
